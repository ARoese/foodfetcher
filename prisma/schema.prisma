// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  passhash  String?
  recipes   Recipe[] @relation(name: "creator")
  favorites Recipe[] @relation(name: "favoritedBy")
  plans     Plan[]
}

model Recipe {
  id           Int               @id @default(autoincrement())
  creator      User              @relation(name: "creator", fields: [creatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoritedBy  User[]            @relation(name: "favoritedBy")
  creatorId    Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  name         String
  instructions String
  videoFile    String?
  imageFile    String?
  ingredients  IngredientEntry[]
  inQuantities RecipeQuantity[]
}

model IngredientEntry {
  id             Int        @id @default(autoincrement())
  recipes        Recipe[]
  ingredient     Ingredient @relation(fields: [ingredientName], references: [name])
  ingredientName String
  measureSymbol  String?
  amount         Float
  amount2        Float?
  sortIndex      Int
}

model Ingredient {
  name    String            @id @unique
  entries IngredientEntry[]
}

model Plan {
  id           Int       @id @default(autoincrement())
  name         String
  owningUserId Int
  owningUser   User      @relation(fields: [owningUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  days         PlanDay[]
}

model PlanDay {
  id           Int              @id @default(autoincrement())
  dayName      String
  weekday      Weekday          @relation(fields: [dayName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  planId       Int
  inPlan       Plan             @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantRecipes RecipeQuantity[]

  // TODO: referential actions on plan days and weekdays and such.
  // Recipes being deleted should delete them in the meal plans 
  @@unique([planId, dayName], name: "noDuplicateDays")
}

model RecipeQuantity {
  id       Int       @id @default(autoincrement())
  quantity Int
  recipeId Int
  recipe   Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inDays   PlanDay[]
}

// Enum of SSMTWTF
model Weekday {
  name       String    @id @unique
  inPlanDays PlanDay[]
}
